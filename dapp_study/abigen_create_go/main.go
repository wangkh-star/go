package main

import (
	"context"
	"crypto/ecdsa"
	"encoding/hex"
	"fmt"
	"log"
	"math/big"
	"time"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/ethclient"
)

const (
	// store合约的字节码
	contractBytecode = "6080604052348015600e575f5ffd5b5061083b8061001c5f395ff3fe608060405234801561000f575f5ffd5b506004361061007b575f3560e01c80639ab24eb0116100595780639ab24eb0146100fb578063b9830ff11461012b578063d8bff5a514610135578063da58c7d9146101655761007b565b80633aed16cd1461007f5780636dd7d8ea146100af5780636f5012f7146100cb575b5f5ffd5b610099600480360381019061009491906105f4565b610195565b6040516100a69190610639565b60405180910390f35b6100c960048036038101906100c491906105f4565b6101e7565b005b6100e560048036038101906100e091906105f4565b6103b2565b6040516100f29190610639565b60405180910390f35b610115600480360381019061011091906105f4565b6103cf565b604051610122919061066a565b60405180910390f35b610133610414565b005b61014f600480360381019061014a91906105f4565b61050e565b60405161015c919061066a565b60405180910390f35b61017f600480360381019061017a91906106ad565b610522565b60405161018c91906106e7565b60405180910390f35b5f60025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff169050919050565b60025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615610271576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102689061075a565b60405180910390fd5b60015f5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546102ba91906107a5565b5f5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550600133908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555050565b6002602052805f5260405f205f915054906101000a900460ff1681565b5f5f5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b5f5f90505b6001805490508110156104fe575f6001828154811061043b5761043a6107d8565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f5f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f905560025f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81549060ff0219169055508080600101915050610419565b5060015f61050c919061055d565b565b5f602052805f5260405f205f915090505481565b60018181548110610531575f80fd5b905f5260205f20015f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5080545f8255905f5260205f2090810190610578919061057b565b50565b5b80821115610592575f815f90555060010161057c565b5090565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6105c38261059a565b9050919050565b6105d3816105b9565b81146105dd575f5ffd5b50565b5f813590506105ee816105ca565b92915050565b5f6020828403121561060957610608610596565b5b5f610616848285016105e0565b91505092915050565b5f8115159050919050565b6106338161061f565b82525050565b5f60208201905061064c5f83018461062a565b92915050565b5f819050919050565b61066481610652565b82525050565b5f60208201905061067d5f83018461065b565b92915050565b61068c81610652565b8114610696575f5ffd5b50565b5f813590506106a781610683565b92915050565b5f602082840312156106c2576106c1610596565b5b5f6106cf84828501610699565b91505092915050565b6106e1816105b9565b82525050565b5f6020820190506106fa5f8301846106d8565b92915050565b5f82825260208201905092915050565b7f20796f752061726520616c726561647920766f746500000000000000000000005f82015250565b5f610744601583610700565b915061074f82610710565b602082019050919050565b5f6020820190508181035f83015261077181610738565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6107af82610652565b91506107ba83610652565b92508282019050808211156107d2576107d1610778565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffdfea2646970667358221220f77b3976be23b72c49862a07efab9618f97b7f2eb19c122c78def4506a53ffb864736f6c634300081e0033"
)

func main() {
	// 创建带超时的context
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// 连接Infura
	client, err := ethclient.DialContext(ctx, "https://sepolia.infura.io/v3/89363631a8ef455ca1b37f251c8c5698")
	if err != nil {
		log.Fatalf("连接Infura失败: %v", err)
	}
	defer client.Close()

	fmt.Println("成功连接到以太坊测试网")
	privateKey, err := crypto.HexToECDSA("784283fd1cb8d8bcf9741e6a2a373e4b31525074240395a3073e83e1c7e5cc6c")
	if err != nil {
		log.Fatal(err)
	}

	publicKey := privateKey.Public()
	publicKeyECDSA, ok := publicKey.(*ecdsa.PublicKey)
	if !ok {
		log.Fatal("error casting public key to ECDSA")
	}

	fromAddress := crypto.PubkeyToAddress(*publicKeyECDSA)

	// 获取nonce
	nonce, err := client.PendingNonceAt(context.Background(), fromAddress)
	if err != nil {
		log.Fatal(err)
	}

	// 获取建议的gas价格
	gasPrice, err := client.SuggestGasPrice(ctx)
	if err != nil {
		log.Printf("Warning: Failed to get gas price, using default: %v", err)
		gasPrice = big.NewInt(20000000000) // 20 Gwei
	}

	// 解码合约字节码
	data, err := hex.DecodeString(contractBytecode)
	if err != nil {
		log.Fatal(err)
	}

	// 创建交易
	tx := types.NewContractCreation(nonce, big.NewInt(0), 3000000, gasPrice, data)

	// 签名交易
	chainID, err := client.NetworkID(context.Background())
	if err != nil {
		log.Fatal(err)
	}

	signedTx, err := types.SignTx(tx, types.NewEIP155Signer(chainID), privateKey)
	if err != nil {
		log.Fatal(err)
	}

	// 发送交易
	err = client.SendTransaction(context.Background(), signedTx)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf("Transaction sent: %s\n", signedTx.Hash().Hex())

	// 等待交易被挖矿
	receipt, err := waitForReceipt(client, signedTx.Hash())
	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf("Contract deployed at: %s\n", receipt.ContractAddress.Hex())

	//
}

func waitForReceipt(client *ethclient.Client, txHash common.Hash) (*types.Receipt, error) {
	for {
		receipt, err := client.TransactionReceipt(context.Background(), txHash)
		if err == nil {
			return receipt, nil
		}
		if err != ethereum.NotFound {
			return nil, err
		}
		// 等待一段时间后再次查询
		time.Sleep(1 * time.Second)
	}
}
